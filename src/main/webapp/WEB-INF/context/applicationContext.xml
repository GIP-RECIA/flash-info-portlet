<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
			 xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
			 xmlns:c="http://www.springframework.org/schema/c" xmlns:p="http://www.springframework.org/schema/p"
			 xmlns:util="http://www.springframework.org/schema/util"
			 xmlns:cache="http://www.springframework.org/schema/cache"
			 xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
  http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
  http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd">

	<!-- This is the root Spring WebApplicationContext. Place in this context 
		the service, dao, and utility-level beans the web tier will access. NOTE: 
		If you have multiple portlets in portlet.xml, you can move beans from the 
		web-tier Spring WebApplicationContext to the root context to avoid having 
		the bean definitions duplicated. -->

	<bean
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="location" value="classpath:configuration.properties" />
	</bean>

	<context:component-scan base-package="org.esco.portlet.service" />
	<context:annotation-config />
	<cache:annotation-driven />

	<bean id="userResource" class="org.esco.portlet.dao.impl.UserResourceImpl">
		<!--<property name="currentEtabCodeInfoKey" value="${userInfo.key.currentEtabId}" />-->
		<property name="mockedUserResource" ref="userResourceMock"/>
	</bean>
	<!--<bean id="flashInfoResource" class="org.esco.portlet.dao.impl.FlashInfoResourceGsonImpl" />-->
	<bean id="flashInfoResource" class="org.esco.portlet.dao.impl.FlashInfoResourceJacksonImpl" />

	<bean id="userResourceMock" class="org.esco.portlet.dao.impl.MockUserResourceImpl">
	</bean>
	<bean id="flashInfoResourceMock" class="org.esco.portlet.dao.impl.MockFlashInfoResourceImpl" />

	<bean id="jsonHttpMessageConverter"
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>application/json</value>
				<value>application/octet-stream</value>
			</list>
		</property>
	</bean>

	<bean id="hostnameVerifier" class="org.esco.portlet.dao.util.EscoHostnameVerifier" p:trustedDomains="${hostnames.trusted}">
	</bean>

	<!-- based on org.apache.http.impl.client.HttpClients.createSystem -->
	<bean id="httpClientBuilder" class="org.apache.http.impl.client.HttpClientBuilder"
				factory-method="create">
		<property name="SSLHostnameVerifier" ref="hostnameVerifier" />
	</bean>

	<bean name="httpClient" factory-bean="httpClientBuilder" factory-method="build" />

	<bean id="restTemplate" class="org.springframework.web.client.RestTemplate">
		<constructor-arg>
			<bean class="org.springframework.http.client.HttpComponentsClientHttpRequestFactory"
						p:readTimeout="5000"
						p:connectTimeout="5000" >
				<property name="httpClient" ref="httpClient" />
			</bean>
		</constructor-arg>
		<property name="messageConverters">
			<list><ref bean="jsonHttpMessageConverter"/></list>
		</property>
	</bean>

	<bean id="cacheManager"
				class="org.springframework.cache.ehcache.EhCacheCacheManager">
		<property name="cacheManager" ref="ehcache"/>
	</bean>

	<bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"/>
		<property name="shared" value="true"/>
	</bean>

</beans>
